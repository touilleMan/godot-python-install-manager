name: CI build
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master


# Global Settings
env:
  PYTHON_VERSION: "3.7"
  GODOT_BINARY_VERSION: "3.2.3"


jobs:


  static-checks:
    name: '📊 Static checks'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Bootstrap
        run: |
          set -eux
          python --version
          pip install pre-commit
      - name: Pre-commit hooks check
        run: |
          pre-commit run --all-files --show-diff-on-failure


#################################################################################


  linux-build:
    name: '🐧 Linux build'
    runs-on: ubuntu-latest
    env:
      PLATFORM: 'x11-64'
      LANG: 'en_US.UTF-8'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 'Setup venv'
        run: |
          set -eux
          python --version
          pip install -U pip
          pip install -r requirements.txt
          # Configuration for scons
          echo 'godot_binary = "${{ env.GODOT_BINARY_VERSION }}"' >> custom.py
      - name: 'Start xvfb'
        run: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo ">>> Started xvfb"
      - name: 'Run tests'
        run: |
          set -eux
          scons tests
        env:
          DISPLAY: ':99.0'
      - name: 'Generate artifact archive'
        run: |
          set -eux
          scons release
      - name: 'Export release artifact'
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: 'build/godot_python_install_manager-*.zip'


#################################################################################


  windows-build:
    name: '🏁 Windows build'
    runs-on: windows-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: 'Setup venv'
        shell: bash
        run: |
          set -eux
          python --version
          python -m pip install --user -U pip
          python -m pip install --user -r requirements.txt
          # Configuration for scons
          echo 'godot_binary = "${{ env.GODOT_BINARY_VERSION }}"' >> custom.py
      - name: 'Install Mesa3D OpenGL'
        shell: bash
        run: |
          set -eux
          # Azure pipelines doesn't provide a GPU with an OpenGL driver,
          # hence we use Mesa3D as software OpenGL driver
          mkdir build/
          pushd build/
          curl https://downloads.fdossena.com/Projects/Mesa3D/Builds/MesaForWindows-x64-20.0.7.7z -o mesa.7z
          # opengl32.dll must be extracted in the same directory than Godot binary
          7z.exe x mesa.7z
          ls -lh opengl32.dll  # Sanity check
          popd
      - name: 'Run tests'
        shell: bash
        run: |
          set -eux
          scons tests


#################################################################################


  macos-build:
    name: '🍎 macOS build'
    runs-on: macos-latest
    env:
      CC: clang
      PLATFORM: 'osx-64'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: 'Set up Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 'Setup venv'
        run: |
          set -eux
          python --version
          pip install -U pip
          pip install -r requirements.txt
          # Configuration for scons
          echo 'godot_binary = "${{ env.GODOT_BINARY_VERSION }}"' >> custom.py
      - name: 'Run tests'
        run: |
          set -eux
          scons tests


#################################################################################


  publish-release:
    name: 'Publish release'
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - linux-build
      - windows-build
      - macos-build
    steps:
      - uses: actions/download-artifact@v2
        name: release
      - name: 'Upload release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: godot_python_install_manager-*.zip
          file_glob: true
          overwrite: true
