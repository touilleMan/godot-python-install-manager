import sys
import re
import json
import subprocess
import io
import zipfile
from traceback import print_exc
from pathlib import Path
from contextlib import contextmanager
from threading import Thread, Event
from http.server import HTTPServer, BaseHTTPRequestHandler
from SCons.Errors import UserError


Import("env")


def make_install_manager_release_archive(project_dir, version):
    # Just use the current build and change the version in plugin.cfg
    buff = io.BytesIO()
    zf = zipfile.ZipFile(buff, mode="w", compression=zipfile.ZIP_STORED, allowZip64=False)
    addon_dir = Path(f"{project_dir}/addons/godot_python_install_manager").resolve()
    for item in addon_dir.rglob("*"):
        if item.is_dir():
            continue
        if item.name == "plugin.cfg":
            data = re.sub('version="[0-9.]+"', f'version="{version}"', item.read_text())
        else:
            data = item.read_bytes()
        zf.writestr(f"addons/godot_python_install_manager/{item.relative_to(addon_dir)}", data)
    zf.close()
    buff.seek(0)
    data = buff.read()
    return data


def make_godot_python_release_archive(project_dir, version):
    # TODO: use a real build of Godot Python !!!
    buff = io.BytesIO()
    zf = zipfile.ZipFile(buff, mode="w", compression=zipfile.ZIP_STORED, allowZip64=False)
    addon_dir = Path(f"{project_dir}/addons/godot_python_install_manager").resolve()
    for item in addon_dir.rglob("*"):
        if item.is_dir():
            continue
        if item.name == "plugin.cfg":
            data = re.sub('version="[0-9.]+"', f'version="{version}"', item.read_text())
        else:
            data = item.read_bytes()
        zf.writestr(f"addons/godot_python/{item.relative_to(addon_dir)}", data)
    zf.close()
    buff.seek(0)
    data = buff.read()
    return data


def get_supported_godot_feature():
    if sys.platform == "linux":
        return "X11"
    elif sys.platform == "darwin":
        return "OSX"
    elif sys.platform == "win32":
        return "Windows"
    else:
        raise RuntimeError(
            f"Cannot determine a suitable supported feature for Godot on this platform ({sys.platform})"
        )


class GithubServerMock:
    def __init__(self, project_dir):
        self.project_dir = project_dir
        self.server = None
        self._started = Event()
        self.addons = {"godot_python_install_manager": [], "godot_python": []}

    def add_release(self, name, data_path=None):
        match = re.search(r"^(.*)-([0-9]+\.[0-9]+\.[0-9]+)", name)
        assert match
        addon_name = match.group(1)
        version = match.group(2)
        tag_name = f"v{version}"
        releases = self.addons[addon_name]
        if data_path:
            browser_download_url = f"http://127.0.0.1:{self.port}/files/{data_path}"
        else:
            browser_download_url = f"http://127.0.0.1:{self.port}/releases/{addon_name}/{version}"
        release_new_asset = {"name": name, "browser_download_url": browser_download_url}
        for release in releases:
            if release["tag_name"] == tag_name:
                release["assets"].append(release_new_asset)
                break
        else:
            release = {"prerelease": False, "tag_name": tag_name, "assets": [release_new_asset]}
            self.addons[addon_name] = list(
                reversed(sorted([*releases, release], key=lambda x: x["tag_name"]))
            )

    @property
    def port(self):
        return self.server.server_port

    def _run(self):
        class HTTPRequestHandler(BaseHTTPRequestHandler):
            def do_GET(handler_self):
                return self._do_GET(handler_self)

        assert self.server is None
        with HTTPServer(("", 0), HTTPRequestHandler) as self.server:
            self._started.set()
            self.server.serve_forever()

    def _stop(self):
        self.server.shutdown()

    def _do_GET(self, request):
        if request.path.startswith("/files/"):
            file = Path(request.path[len("/files/") :])
            if not file.is_file():
                request.send_response(404)
                request.end_headers()
                return
            else:
                data = file.read_bytes()
                request.send_response(200)
                request.send_header("content-type", "application/zip")
                request.send_header("content-length", len(data))
                request.end_headers()
                request.wfile.write(data)
                return

        if request.path.startswith("/releases/"):
            _, _, addon_name, addon_release = request.path.split("/")
            if addon_name == "godot_python_install_manager":
                data = make_install_manager_release_archive(self.project_dir, addon_release)
            elif addon_name == "godot_python":
                data = make_godot_python_release_archive(self.project_dir, addon_release)
            else:
                request.send_response(404)
                request.end_headers()
                return
            request.send_response(200)
            request.send_header("content-type", "application/zip")
            request.send_header("content-length", len(data))
            request.end_headers()
            request.wfile.write(data)
            return

        for addon_name, addon_releases in self.addons.items():
            if request.path == f"/{addon_name.replace('_', '-')}/releases":
                data = json.dumps(addon_releases).encode("utf-8")
                request.send_response(200)
                request.send_header("content-type", "application/json")
                request.send_header("content-length", len(data))
                request.end_headers()
                request.wfile.write(data)
                return
        else:
            request.send_response(404)
            request.end_headers()
            return

    @classmethod
    @contextmanager
    def run(cls, project_dir):
        gh = cls(project_dir)

        thread = Thread(target=gh._run, daemon=True)
        thread.start()
        gh._started.wait()
        try:
            # Patch install manager addon config to head to our fake github api server
            addons_gd = Path(f"{project_dir}/addons/godot_python_install_manager/addons.gd")
            addons_gd.write_text(
                addons_gd.read_text().replace(
                    "https://api.github.com/repos/touilleMan", f"http://127.0.0.1:{gh.port}"
                )
            )
            # Also patch version so the tests won't become irrelevant with time
            plugin_cfg = Path(f"{project_dir}/addons/godot_python_install_manager/plugin.cfg")
            plugin_cfg.write_text(
                re.sub('version="[0-9.]+"', 'version="0.0.1"', plugin_cfg.read_text())
            )
            yield gh
        finally:
            gh._stop()
            thread.join()


def test_factory(target, action):
    target_project_dir = Dir(f"#build/tests/test_{target}_project")
    env.Command(
        target=target_project_dir,
        source=env["DIST_ROOT"],
        action=[
            Delete("$TARGET"),
            Copy(dest="$TARGET", src=env.Dir("test_project")),
            Copy(dest="$TARGET/addons", src="$DIST_ROOT/addons"),
        ],
    )
    env.Clean(target_project_dir, target_project_dir)
    env.AlwaysBuild(target_project_dir)

    env.Command(target=[target], source=[target_project_dir], action=action)
    env.Depends(target, env["godot_binary"])
    env.AlwaysBuild(target)

    return target


# Decorator to apply on test functions
def test(test_function):
    return test_factory(test_function.__name__, test_function)


def run_cmd(cmd, expected_returncode=0):
    def _attach_error_context(obj):
        @contextmanager
        def _error_context():
            try:
                yield
            except Exception as exc:
                print(f"Test failure !!!")
                print()
                print_exc()
                print()
                print(f"stdout: {obj.stdout.decode()}")
                print()
                print(f"stderr: {obj.stderr.decode()}")
                raise UserError(f"Test has failed {exc}") from exc

        obj.error_context = _error_context

    if isinstance(cmd, str):
        cmd = cmd.split()
    print(" ".join(cmd))
    try:
        out = subprocess.run(cmd, check=True, capture_output=True)
    except subprocess.CalledProcessError as exc:
        if expected_returncode == exc.returncode:
            _attach_error_context(exc)
            return exc
        print(f"Error !!! Non-zero return code: {exc.returncode}")
        print()
        print(f"stdout: {exc.stdout.decode()}")
        print()
        print(f"stderr: {exc.stderr.decode()}")
        raise UserError(f"Test has failed (returncode: {exc.returncode})") from exc
    else:
        if "ObjectDB instances leaked at exit" in out.stderr.decode():
            print(f"Error !!! ObjectDB instances leaked at exit !")
            print()
            print(f"stdout: {out.stdout.decode()}")
            print()
            print(f"stderr: {out.stderr.decode()}")
            raise UserError(f"ObjectDB instances leaked at exit !")
    # See https://github.com/godotengine/godot/issues/30207
    if "SCRIPT ERROR:" in out.stdout.decode():
        print(f"Godot error detected !!!")
        print()
        print(f"stdout: {out.stdout.decode()}")
        print()
        print(f"stderr: {out.stderr.decode()}")
        raise UserError(f"Test has failed (Godot error)")

    _attach_error_context(out)
    return out


def run_cli(project_path, cmd, **kwargs):
    return run_cmd(
        f"{env['godot_binary']} --verbose --path {project_path} --script res://addons/godot_python_install_manager/cli.gd {cmd}",
        **kwargs,
    )


@test
def test_cli_no_arguments(target, source, env):
    out = run_cli(source[0], "")
    with out.error_context():
        stdout = out.stdout.decode()
        assert (
            "Usage: godot [--path <project_path>] [--no-window] --script res://addons/godot_python_install_manager/cli.gd [options]"
            in stdout
        )


@test
def test_cli_info(target, source, env):
    out = run_cli(source[0], "info")
    with out.error_context():
        stdout = out.stdout.decode()
        assert "Install Manager: " in stdout
        assert "Godot Python: Not installed" in stdout


def _list_version_testbed(cmd, addon, source):
    supported_feature = get_supported_godot_feature()

    with GithubServerMock.run(source[0]) as gh:
        # No versions at all
        out = run_cli(source[0], cmd, expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Only incompatible versions
        gh.add_release(f"{addon}-2.0.0-godot42.zip")
        gh.add_release(f"{addon}-2.0.0-godot3-NotSupportedFeature.zip")
        gh.add_release(f"{addon}-2.0.0-godot3-{supported_feature}-NotSupportedFeature.zip")
        out = run_cli(source[0], cmd, expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Multiple compatible versions
        gh.add_release(f"{addon}-1.0.0-godot3.zip")
        gh.add_release(f"{addon}-1.1.0-godot3.zip")
        gh.add_release(f"{addon}-1.1.1-godot3-{supported_feature}.zip")
        out = run_cli(source[0], cmd)
        with out.error_context():
            stdout = out.stdout.decode().replace("\r\n", "\n")
            assert (
                f"""Available versions:
1.1.1 ({addon}-1.1.1-godot3-{supported_feature}.zip)
1.1.0 ({addon}-1.1.0-godot3.zip)
1.0.0 ({addon}-1.0.0-godot3.zip)
"""
                in stdout
            )


@test
def test_cli_list_versions(target, source, env):
    _list_version_testbed("list_versions", "godot_python", source)


@test
def test_cli_self_list_versions(target, source, env):
    _list_version_testbed("self_list_versions", "godot_python_install_manager", source)


@test
def test_cli_self_update(target, source, env):
    supported_feature = get_supported_godot_feature()

    with GithubServerMock.run(source[0]) as gh:
        # No versions at all
        out = run_cli(source[0], "self_upgrade", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Only incompatible versions
        gh.add_release("godot_python_install_manager-2.0.0-godot42.zip")
        out = run_cli(source[0], "self_upgrade 2.0.0", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Now we do the upgrade !
        gh.add_release("godot_python_install_manager-2.0.0-godot3.zip")
        out = run_cli(source[0], "self_upgrade 2.0.0")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Upgrading Install Manager to version 2.0.0" in stdout

        # Make sure the new version is installed
        out = run_cli(source[0], "info")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Install Manager: 2.0.0" in stdout

        # Upgrade to a new latest version
        gh.add_release("godot_python_install_manager-2.0.1-godot3.zip")
        out = run_cli(source[0], "self_upgrade")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Upgrading Install Manager to version 2.0.1" in stdout

        # Make sure the new version is installed
        out = run_cli(source[0], "info")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Install Manager: 2.0.1" in stdout


@test
def test_cli_install(target, source, env):
    supported_feature = get_supported_godot_feature()

    with GithubServerMock.run(source[0]) as gh:
        # No versions at all
        out = run_cli(source[0], "install", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Only incompatible versions
        gh.add_release("godot_python-2.0.0-godot42.zip")
        out = run_cli(source[0], "install", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Now we do the install !
        gh.add_release("godot_python-2.0.0-godot3.zip")
        out = run_cli(source[0], "install 2.0.0")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Upgrading Godot Python to version 2.0.0" in stdout

        # Make sure the version is installed
        out = run_cli(source[0], "info")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Godot Python: 2.0.0" in stdout

        # Retry the install should not do anything...
        out = run_cli(source[0], "install")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Godot Python is already installed in version 2.0.0" in stdout

        # ...even if a newer version is now available
        gh.add_release("godot_python-2.0.1-godot3.zip")
        out = run_cli(source[0], "install")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Godot Python is already installed in version 2.0.0" in stdout


@test
def test_cli_update(target, source, env):
    supported_feature = get_supported_godot_feature()

    with GithubServerMock.run(source[0]) as gh:
        # No versions at all
        out = run_cli(source[0], "upgrade", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Only incompatible versions
        gh.add_release("godot_python-2.0.0-godot42.zip")
        out = run_cli(source[0], "upgrade 2.0.0", expected_returncode=1)
        with out.error_context():
            stdout = out.stdout.decode()
            assert "No compatible version found" in stdout

        # Now we do the upgrade !
        gh.add_release("godot_python-2.0.0-godot3.zip")
        out = run_cli(source[0], "upgrade 2.0.0")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Upgrading Godot Python to version 2.0.0" in stdout

        # Make sure the new version is installed
        out = run_cli(source[0], "info")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Godot Python: 2.0.0" in stdout

        # Upgrade to a new latest version
        gh.add_release("godot_python-2.0.1-godot3.zip")
        out = run_cli(source[0], "upgrade")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Upgrading Godot Python to version 2.0.1" in stdout

        # Make sure the new version is installed
        out = run_cli(source[0], "info")
        with out.error_context():
            stdout = out.stdout.decode()
            assert "Godot Python: 2.0.1" in stdout
